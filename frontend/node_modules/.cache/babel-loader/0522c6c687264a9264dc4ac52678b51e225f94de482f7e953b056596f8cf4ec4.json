{"ast":null,"code":"const API_URL = \"http://127.0.0.1:8000\";\nexport const getPrediction = async features => {\n  try {\n    const response = await fetch(`${API_URL}/predict_named`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(features)\n    });\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch prediction\");\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching prediction:\", error);\n    return {\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["API_URL","getPrediction","features","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","error","console","message"],"sources":["/Users/allenngeorge/Files/Projects/ml_fno_prediction/frontend/src/api.js"],"sourcesContent":["const API_URL = \"http://127.0.0.1:8000\";\n\nexport const getPrediction = async (features) => {\n    try {\n        const response = await fetch(`${API_URL}/predict_named`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(features),\n        });\n        \n        if (!response.ok) {\n            throw new Error(\"Failed to fetch prediction\");\n        }\n        \n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching prediction:\", error);\n        return { error: error.message };\n    }\n};\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,uBAAuB;AAEvC,OAAO,MAAMC,aAAa,GAAG,MAAOC,QAAQ,IAAK;EAC7C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,gBAAgB,EAAE;MACrDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;IACjC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;IACjD;IAEA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO;MAAEA,KAAK,EAAEA,KAAK,CAACE;IAAQ,CAAC;EACnC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}